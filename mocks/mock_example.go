// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bryanpaluch/example_go_app/example (interfaces: DB)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	example "github.com/bryanpaluch/example_go_app/example"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// AddPerson mocks base method
func (m *MockDB) AddPerson(arg0 context.Context, arg1 *example.Person) error {
	ret := m.ctrl.Call(m, "AddPerson", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPerson indicates an expected call of AddPerson
func (mr *MockDBMockRecorder) AddPerson(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPerson", reflect.TypeOf((*MockDB)(nil).AddPerson), arg0, arg1)
}

// GetPersonByID mocks base method
func (m *MockDB) GetPersonByID(arg0 context.Context, arg1 int) (*example.Person, error) {
	ret := m.ctrl.Call(m, "GetPersonByID", arg0, arg1)
	ret0, _ := ret[0].(*example.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonByID indicates an expected call of GetPersonByID
func (mr *MockDBMockRecorder) GetPersonByID(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonByID", reflect.TypeOf((*MockDB)(nil).GetPersonByID), arg0, arg1)
}
